package main

import (
	"encoding/json"
	"fmt"
	"log"
	"rodmcp/internal/browser"
	"rodmcp/internal/logger"
	"rodmcp/internal/webtools"
	"time"
)

func main() {
	fmt.Println("üé¨ RodMCP Visual Demo - Browser will be visible!")

	// Initialize logger
	logConfig := logger.Config{
		LogLevel:    "info",
		LogDir:      "demo_logs",
		MaxSize:     10,
		MaxBackups:  3,
		MaxAge:      1,
		Compress:    false,
		Development: true,
	}

	logr, err := logger.New(logConfig)
	if err != nil {
		log.Fatalf("Failed to initialize logger: %v", err)
	}
	defer logr.Sync()

	// Initialize browser manager with VISIBLE window
	browserConfig := browser.Config{
		Headless:     false, // ‚Üê VISIBLE BROWSER
		Debug:        false,
		SlowMotion:   1 * time.Second, // Slow for demo
		WindowWidth:  1200,
		WindowHeight: 800,
	}

	browserMgr := browser.NewManager(logr, browserConfig)
	if err := browserMgr.Start(browserConfig); err != nil {
		log.Fatalf("Failed to start browser: %v", err)
	}
	defer browserMgr.Stop()

	// Initialize tools
	createTool := webtools.NewCreatePageTool(logr)
	navigateTool := webtools.NewNavigatePageTool(logr, browserMgr)
	screenshotTool := webtools.NewScreenshotTool(logr, browserMgr)
	scriptTool := webtools.NewExecuteScriptTool(logr, browserMgr)

	fmt.Println("üëÄ Creating a beautiful demo page...")

	// Create an impressive demo page
	createArgs := map[string]interface{}{
		"filename": "visual_demo.html",
		"title":    "üöÄ RodMCP Visual Demo",
		"html": `
			<div class="container">
				<header>
					<h1>üöÄ RodMCP Visual Demo</h1>
					<p>Watch the browser automation in action!</p>
				</header>
				
				<main>
					<div class="demo-section">
						<h2>‚ú® Interactive Elements</h2>
						<button id="colorBtn" class="btn">Change Background Color</button>
						<button id="animateBtn" class="btn">Animate Box</button>
						<button id="textBtn" class="btn">Add Dynamic Text</button>
					</div>
					
					<div class="animated-box" id="box">
						<p>üéØ Click the buttons above to see magic!</p>
					</div>
					
					<div id="dynamic-content"></div>
				</main>
				
				<footer>
					<p>Generated by RodMCP ‚Ä¢ Built with Go + Rod</p>
				</footer>
			</div>
		`,
		"css": `
			* {
				margin: 0;
				padding: 0;
				box-sizing: border-box;
			}
			
			body {
				font-family: 'Segoe UI', system-ui, sans-serif;
				background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
				color: white;
				min-height: 100vh;
				display: flex;
				align-items: center;
				justify-content: center;
			}
			
			.container {
				max-width: 800px;
				padding: 40px;
				text-align: center;
			}
			
			header h1 {
				font-size: 3rem;
				margin-bottom: 1rem;
				text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
			}
			
			header p {
				font-size: 1.2rem;
				opacity: 0.9;
				margin-bottom: 2rem;
			}
			
			.demo-section {
				background: rgba(255, 255, 255, 0.1);
				padding: 30px;
				border-radius: 15px;
				backdrop-filter: blur(10px);
				margin-bottom: 30px;
			}
			
			.btn {
				background: linear-gradient(45deg, #ff6b6b, #ee5a24);
				color: white;
				border: none;
				padding: 15px 25px;
				margin: 10px;
				border-radius: 50px;
				font-size: 1rem;
				cursor: pointer;
				transition: all 0.3s ease;
				box-shadow: 0 4px 15px rgba(0,0,0,0.2);
			}
			
			.btn:hover {
				transform: translateY(-2px);
				box-shadow: 0 6px 20px rgba(0,0,0,0.3);
			}
			
			.animated-box {
				background: rgba(255, 255, 255, 0.15);
				padding: 40px;
				border-radius: 20px;
				margin: 30px 0;
				transition: all 0.5s ease;
				border: 2px solid rgba(255,255,255,0.2);
			}
			
			.animated-box.animate {
				transform: scale(1.05) rotate(2deg);
				background: rgba(255, 215, 0, 0.3);
				box-shadow: 0 10px 30px rgba(255, 215, 0, 0.4);
			}
			
			#dynamic-content {
				margin-top: 20px;
				min-height: 50px;
				display: flex;
				flex-wrap: wrap;
				justify-content: center;
				gap: 10px;
			}
			
			.dynamic-item {
				background: rgba(255, 255, 255, 0.2);
				padding: 10px 20px;
				border-radius: 25px;
				animation: fadeInUp 0.6s ease;
			}
			
			@keyframes fadeInUp {
				from {
					opacity: 0;
					transform: translateY(20px);
				}
				to {
					opacity: 1;
					transform: translateY(0);
				}
			}
			
			footer {
				margin-top: 40px;
				opacity: 0.7;
				font-size: 0.9rem;
			}
		`,
		"javascript": `
			console.log('üöÄ RodMCP Visual Demo loaded!');
			
			let colorIndex = 0;
			const colors = [
				'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
				'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',
				'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)',
				'linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)',
				'linear-gradient(135deg, #fa709a 0%, #fee140 100%)'
			];
			
			document.getElementById('colorBtn').addEventListener('click', function() {
				colorIndex = (colorIndex + 1) % colors.length;
				document.body.style.background = colors[colorIndex];
				console.log('Background color changed to index:', colorIndex);
			});
			
			document.getElementById('animateBtn').addEventListener('click', function() {
				const box = document.getElementById('box');
				box.classList.toggle('animate');
				console.log('Box animation toggled');
			});
			
			let textCount = 0;
			document.getElementById('textBtn').addEventListener('click', function() {
				textCount++;
				const content = document.getElementById('dynamic-content');
				const item = document.createElement('div');
				item.className = 'dynamic-item';
				item.textContent = '‚ú® Dynamic Item #' + textCount;
				content.appendChild(item);
				console.log('Added dynamic text item:', textCount);
			});
			
			// Welcome animation
			setTimeout(() => {
				console.log('Welcome! Ready for automation demo.');
			}, 1000);
		`,
	}

	result, err := createTool.Execute(createArgs)
	if err != nil {
		log.Fatalf("Failed to create page: %v", err)
	}
	fmt.Println("‚úÖ", result.Content[0].Text)

	fmt.Println("üåê Opening the demo page in browser...")
	time.Sleep(2 * time.Second)

	// Navigate to the page
	navigateArgs := map[string]interface{}{
		"url": "visual_demo.html",
	}

	result, err = navigateTool.Execute(navigateArgs)
	if err != nil {
		log.Fatalf("Failed to navigate: %v", err)
	}
	fmt.Println("‚úÖ", result.Content[0].Text)

	fmt.Println("‚è±Ô∏è  Waiting 5 seconds for you to see the page...")
	time.Sleep(5 * time.Second)

	fmt.Println("üé® Automating: Clicking 'Change Background Color' button...")
	scriptArgs := map[string]interface{}{
		"script": "document.getElementById('colorBtn').click(); 'Background color changed!'",
	}

	result, err = scriptTool.Execute(scriptArgs)
	if err != nil {
		log.Printf("Script error: %v", err)
	} else {
		fmt.Println("‚úÖ Result:", result.Content[0].Text)
	}

	time.Sleep(3 * time.Second)

	fmt.Println("üé≠ Automating: Clicking 'Animate Box' button...")
	scriptArgs = map[string]interface{}{
		"script": "document.getElementById('animateBtn').click(); 'Box animation triggered!'",
	}

	result, err = scriptTool.Execute(scriptArgs)
	if err != nil {
		log.Printf("Script error: %v", err)
	} else {
		fmt.Println("‚úÖ Result:", result.Content[0].Text)
	}

	time.Sleep(3 * time.Second)

	fmt.Println("üìù Automating: Adding dynamic content...")
	for i := 1; i <= 3; i++ {
		scriptArgs = map[string]interface{}{
			"script": "document.getElementById('textBtn').click(); 'Added item " + fmt.Sprintf("%d", i) + "'",
		}

		result, err = scriptTool.Execute(scriptArgs)
		if err != nil {
			log.Printf("Script error: %v", err)
		} else {
			fmt.Println("‚úÖ Added item", i)
		}
		time.Sleep(1 * time.Second)
	}

	fmt.Println("üì∏ Taking a final screenshot...")
	screenshotArgs := map[string]interface{}{
		"filename": "visual_demo_final.png",
	}

	result, err = screenshotTool.Execute(screenshotArgs)
	if err != nil {
		log.Printf("Screenshot error: %v", err)
	} else {
		fmt.Println("‚úÖ", result.Content[0].Text)
	}

	fmt.Println("üéØ Getting final page state...")
	scriptArgs = map[string]interface{}{
		"script": `
			({
				title: document.title,
				dynamicItems: document.querySelectorAll('.dynamic-item').length,
				isBoxAnimated: document.getElementById('box').classList.contains('animate'),
				currentBackground: window.getComputedStyle(document.body).background.substring(0, 50) + '...'
			})
		`,
	}

	result, err = scriptTool.Execute(scriptArgs)
	if err != nil {
		log.Printf("Script error: %v", err)
	} else {
		if result.Content[0].Data != nil {
			dataJSON, _ := json.MarshalIndent(result.Content[0].Data, "", "  ")
			fmt.Printf("üìä Final page state:\n%s\n", string(dataJSON))
		}
	}

	fmt.Println("\nüéâ Visual demo complete!")
	fmt.Println("üìÅ Generated files:")
	fmt.Println("   ‚Ä¢ visual_demo.html - Interactive demo page")
	fmt.Println("   ‚Ä¢ visual_demo_final.png - Final screenshot")
	fmt.Println("   ‚Ä¢ demo_logs/ - Demo log files")

	fmt.Println("\n‚è±Ô∏è  Keeping browser open for 10 more seconds...")
	time.Sleep(10 * time.Second)
}
